name: build-deploy
on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - testing
      - multi-arch

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: create env files
        run: |
          touch .env
          echo ${{ secrets.MY_PASSWORD}}
          echo SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID}} >> .env
          echo SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET}} >> .env
          echo SPOTIFY_USER=${{ secrets.SPOTIFY_USER}} >> .env
          echo SPOTIFY_PWD=${{ secrets.SPOTIFY_PWD}} >> .env
          echo DATABASE_URL=postgresql+psycopg2://postgres:postgres@db:5432 >> .env
          echo DBT_PROFILES_DIR=/services/airflow/dbt >> .env
          echo AIRFLOW_HOME=/services/airflow/airflow >> .env
          echo AIRFLOW__CORE__DAGS_FOLDER=/services/airflow/airflow/dags >> .env
          echo AIRFLOW__CORE__PARALLELISM=4 >> .env
          echo AIRFLOW__CORE__DAG_CONCURRENCY=4 >> .env
          echo AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG=${{ secrets.AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG}} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER}} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD}} >> .env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST}} >> .env
          echo POSTGRES_PORT=5433 >> .env
          echo POSTGRES_DB=airflowdb >> .env
          echo DBT_POSTGRES_PASSWORD=${{ secrets.POSTGRES_HOST}} >> .env
          echo DBT_POSTGRES_USER=postgres >> .env
          echo DBT_POSTGRES_DB=postgres >> .env
          echo DBT_DBT_SCHEMA=test >> .env
          echo DBT_DBT_RAW_DATA_SCHEMA=public >> .env
          echo DBT_POSTGRES_HOST=db >> .env
          echo MY_USERNAME=${{ secrets.POSTGRES_HOST}} >> .env
          echo MY_PASSWORD=${{ secrets.MY_PASSWORD}} >> .env
      - name: run containerss for test
        run: docker-compose -f docker-compose-amd.yml up --build -d
      - name: wait 30s
        run: sleep 20

      - name: init migration
        run: docker-compose -f docker-compose-amd.yml run web alembic revision --autogenerate -m "First migration"
      - name: ls 
        run: ls
      - name: migrate
        run: docker-compose -f docker-compose-amd.yml run web alembic upgrade head
      - name: add users
        run: |
          curl -X POST "http://localhost:8000/user/" -H  "accept: application/json" -H  "Content-Type: application/json" -d "{\"username\":\"maxence\",\"password\":\"maxence\"}"
      - name: test
        run: docker-compose -f docker-compose-amd.yml run web pytest      
      - name: enable experimental mode docker
        run: export DOCKER_CLI_EXPERIMENTAL=enabled
      - name: login to docker hub
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD}}      
      - name: create builder
        run: docker buildx create --name builder_multi_arch && docker buildx use builder_multi_arch
      - name: build web and push to docker
        run: cd ./services/web && docker buildx build --platform linux/amd64,linux/arm/v7 -t maxenceroux/spotify-web-with-code --push .
      - name: build airflow and push to docker 
        run: cd ./services/airflow && docker buildx build --platform linux/amd64,linux/arm/v7 -t maxenceroux/airflow-with-dags --push .
      - name: install sshpass
        run: sudo apt-get install sshpass
      - name: generate key
        run: ssh-keygen -q -t rsa -N '' <<< ""$'\n'"y" 2>&1 >/dev/null
      - name: send keys to rpi
        run: sshpass -p "${{ secrets.RPI_PASSWORD}}" ssh-copy-id -o StrictHostKeyChecking=no -p 666 pi@${{ secrets.HOST }} <<< ""$'\n'"y"[B
      - name: ssh into rpi and login rpi to docker
        run: |
          sshpass -p "${{ secrets.RPI_PASSWORD}}" ssh -o StrictHostKeyChecking=no -p 666 pi@${{ secrets.HOST }} "docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD}}"
      - name: pull and run docker from rpi
        run: |
          sshpass -p "${{ secrets.RPI_PASSWORD}}" ssh -o StrictHostKeyChecking=no -p 666 pi@${{ secrets.HOST }} "sh /home/pi/project/test_prod/deploy.sh"
      
            
      
      